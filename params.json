{"google":"UA-126897-7","tagline":"Pub/Sub oriented JavaScript","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Hub.js","body":"# Advanced events for your modules\r\n\r\nLet your JavaScript modules talk to each other with asynchronous publish / subscribe.\r\nOn Node.js or in the browser.\r\n\r\n## Get it!\r\n\r\nInstall on Node with NPM:\r\n\r\n```\r\nnpm install hubjs\r\n```\r\n\r\nOr download a [package for browsers](https://github.com/mantoni/hub.js/downloads).\r\n\r\n***\r\n\r\n# Usage\r\n\r\n## Instantiation\r\n\r\n```js\r\nvar hubjs = require('hubjs');\r\nvar hub = hubjs();\r\n```\r\n\r\n## Publish / Subscribe\r\n\r\n```js\r\nhub.on('some.event', function (a, b) {\r\n  // ...\r\n});\r\nhub.emit('some.event', 'any', 'args');\r\n```\r\n\r\n## Return Values\r\n\r\n```js\r\nhub.on('answer', function () {\r\n  return 42;\r\n});\r\nhub.emit('answer', function (err, value) {\r\n  console.log(value);\r\n});\r\n```\r\n\r\n## Callbacks\r\n\r\nSimply define an (additional) callback argument:\r\n\r\n```js\r\nhub.on('answer', function (callback) {\r\n  callback(null, 42);\r\n});\r\nhub.emit('answer', function (err, value) {\r\n  console.log(value);\r\n});\r\n```\r\n\r\nAlternatively, call `this.callback()` to obtain a callback, or even multiple callbacks that will be waited for.\r\n\r\n## Exception Handling\r\n\r\n```js\r\nhub.on('answer', function () {\r\n  throw new Error('ouch!');\r\n});\r\nhub.emit('answer', function (err) {\r\n  console.log(err);\r\n});\r\n```\r\n\r\nExceptions from multiple listeners will be merged into an `ErrorList` with an `errors` array containing all the original exceptions.\r\n\r\n## Wildcard Subscriptions\r\n\r\nIt is also possible to subscribe to events matching an expression.\r\n\r\n`*` matches `test`, but not `test.two`, while `**` matches both. `test.*` matches `test.one` but not `one.test`.\r\nUnless normal listeners, matchers do not get invoked in registration order. The more generic matchers are invoked before the more specific ones, e.g. if `a.b.c` is emitted, a listener on `a.**` is invoked before a listener on `a.b.*`.\r\n\r\n```js\r\nhub.on('**.init', function (data) {\r\n  // ...\r\n});\r\n```\r\n\r\n## Wildcard Emit / Broadcasting\r\n\r\nIt is also possible to use wildcards with `hub.emit` to invoke all matching listeners.\r\n\r\n```js\r\nhub.emit('**.destroy');\r\n```\r\n\r\n## Event Phases\r\n\r\nEach event is emitted in 6 phases:\r\n\r\n 1. `before(*)`\r\n 2. `before(event)`\r\n 3. `on(*)`\r\n 4. `on(event)`\r\n 5. `after(event)`\r\n 6. `after(*)`\r\n\r\nEach phase is completed if all callbacks on all listeners where invoked. The next phase in only executed if the previous one is complete.\r\nCalling `this.stop()` will prevent the following phases from being executed. Note that other listeners on the same phase will still be invoked.\r\n\r\nThe first 4 phases will receive the arguments passed to emit. Phase 5 and 6 will receive `(err, value)`, which is the same as what gets passed to an `emit` callback.\r\n\r\n## Strategies\r\n\r\nStrategies are functions that take an array of non-undefined values and return a result of any type.\r\n\r\n```js\r\nhub.on('answer.a', function () { return 2; });\r\nhub.on('answer.b', function () { return 3; });\r\nhub.on('answer.c', function () { return 7; });\r\n\r\nhub.emit('answer.*', hubjs.CONCAT, function (err, results) {\r\n  console.log(results.join(' * ')); // = 2 * 3 * 7\r\n});\r\n```\r\n\r\nThese strategies are pre-defined:\r\n\r\n - `LAST` - returns the last non-undefined value\r\n - `CONCAT` - returns an array of all non-undefined listener return values\r\n\r\n## Views\r\n\r\nViews expose the hub API but map all event names relative to the given namespace.\r\n\r\n```js\r\nvar server = hub.view('server');\r\nserver.emit('listen', 80); // emits server.listen\r\nserver.on('request', ...); // registers a listener on server.request\r\nserver.removeAllListeners(); // removes all listeners matching server.**\r\n```\r\n\r\nThe `this` keyword references a view in each listener that is relative to the namespace of the current event.\r\n\r\n```js\r\nhub.once('server.listen', function () {\r\n  this.on('request', ...); // register a listener for server.request\r\n});\r\n```\r\n\r\n***\r\n\r\n# API\r\n\r\n#### `hubjs([listeners])`\r\nThe hub module exports a factory function which takes optional listeners and returns a hub instance. All functions in the given listeners object will be installed on the hub instance using `on`.\r\n\r\n```js\r\nvar hubjs = require('hubjs');\r\nvar hub = hubjs({\r\n  'some.event' : function () { /* ... */ }\r\n});\r\n```\r\n\r\n#### `hub.on(event, function)`\r\nRegisters a listener for an event. The event may contain `*` or `**` to register a \"matcher\" (see below). If the listener function expects more arguments than are passed to `emit`, the last argument will be a callback function. The listener is expected to invoke the callback once completed with an error object or `null` and a single return value.\r\n\r\n```js\r\nhub.on('**', function () {\r\n  console.log('hub event ' + this.event + '(' + this.args().join(', ') + ')');\r\n});\r\n```\r\n\r\n#### `hub.addListener(event, function)`\r\nIs an alias for `hub.on`.\r\n\r\n#### `hub.before(event, function)`\r\nLike on, but invoked before listeners registered with `on`.\r\n\r\n#### `hub.after(event, function)`\r\nLike on, but invoked after listeners registered with `on`. The arguments passed to the given function are the same as passed to a callback to `emit`.\r\n\r\n```js\r\nhub.before('some.server.request', function (url, params) {\r\n  // ...\r\n});\r\n\r\nhub.after('some.server.request', function (err, response) {\r\n  // ...\r\n});\r\n```\r\n\r\n#### `hub.un(event, function)`\r\nUnregisters a single listener for an event.\r\n\r\n#### `hub.removeListener(event, function)`\r\nIs an alias for `hub.un`.\r\n\r\n#### `hub.removeAllListeners([event])`\r\nUnregisters all listeners, or all listeners for the given event.\r\n\r\n#### `hub.once(event, function)`\r\nRegisters a listerner for an event that will be automatically unregistered on the first invocation.\r\n\r\n#### `hub.onceBefore(event, function)`\r\nLike `once`, but registers the listener with `hub.before`.\r\n\r\n#### `hub.onceAfter(event, function)`\r\nLike `once`, but registers the listener with `hub.after`.\r\n\r\n#### `hub.emit(event[, arg1, arg2, ...][[, strategy], callback])`\r\nInvokes all listeners for an event. The optional arguments are passed to each listener. The event may contain `*` or `**` to invoke all listeners registered for matching events (broadcasting). The optional callback will be invoked once all listeners returned. The first argument is an error if at least one of the listeners threw, the second argument is the return value. If a callback is given, the optional strategy filters the return values of the listeners. By default the strategy `hub.LAST` is used.\r\n\r\n## this in listeners\r\n\r\nThe API of the `this` object in all listeners and callbacks exposes the hub API (see Views), plus some additional functions and properties:\r\n\r\n#### `hub`\r\nThe hub instance.\r\n\r\n#### `event`\r\nThe current event.\r\n\r\n#### `args()`\r\nReturns a copy of the arguments passed to emit without the event.\r\n\r\n#### `stop()`\r\nPrevent listener invocation on the following event phases.\r\n\r\n#### `stopped()`\r\nReturns true if `stop()` was called.\r\n\r\n#### `callback()`\r\nReturns a callback that has to be invoked for the operation to complete. Listeners may obtain mutliple callbacks. The next even phase will be entered once all callbacks where invoked.\r\n\r\n## events\r\n\r\nCalling `on`, `before`, `after`, `once`, `onceBefore` or `onceAfter` triggers a `newListener` event passing the event name and the listener function as arguments. If the event gets stopped (`this.stop()`) the listener will not be registered."}